require("dotenv").config();

const express = require("express"),
  app = express(),
  session = require("express-session"),
  cors = require("cors"),
  bodyParser = require("body-parser"),
  server = require("http").createServer(app),
  db = require("./config/db"),
  User = require("./models/User.js"),
  swaggerJsdoc = require("swagger-jsdoc"),
  swaggerUi = require("swagger-ui-express"),
  SECRET = "thisismysecret@dsad12sd!@",
  responseConstants = require("./config/constants");
// Requiring Routes
const authRoutes = require("./routes/auth"),
    storeRoutes = require("./routes/store"),
    indexRoutes = require("./routes/index");

const corsOptions = {
    optionsSuccessStatus: 200,
    'allowedHeaders': ['sessionId', 'content-Type'],
    'exposedHeaders': ['sessionId'],
    'credentials': true,
    'origin': '*'
};

const swaggerOptions = {
  swaggerDefinition: {
    // Like the one described here: https://swagger.io/specification/#infoObject
    info: {
      title: "Shopping Online API",
      version: "1.0.0",
      description: "Shopping Online API with autogenerated swagger doc"
    }
  },
  // List of files to be processes. You can also set globs './routes/*.js'
  apis: ["./routes/**/*.js"]
};

const specs = swaggerJsdoc(swaggerOptions);

app.use(cors(corsOptions));

app.use(
  session({
    secret: SECRET,
    resave: false,
    saveUninitialized: true,
    cookie: { maxAge: 600000, secure: false }
  })
);
app.use(bodyParser.urlencoded({extended: true}));
app.use(bodyParser.json());
app.use(express.static(__dirname + "/public"));

app.use("/", indexRoutes);
app.use("/shopping/api/", swaggerUi.serve, swaggerUi.setup(specs));
app.use("/api/auth", authRoutes);
app.use("/api/store", storeRoutes);

server.listen(5000, function(){

    User.findOne({role: responseConstants.ROLE_ADMIN}, function(err, user) {
        if (err) {
            console.error(err);
        } else if (!user) {
            const user = new User({
              idNumber: "111111111",
              email: "admin@admin.com",
              password: "admin",
              firstName: "admin",
              lastName: "admin",
              role: responseConstants.ROLE_ADMIN
            });
            user.save(function (err) {
                if (err) {
                    console.log(err)
                } else {
                    console.log("Admin Registered!");
                }
            });
        } else {
            console.log("Admin already registered");
        }
    });

    console.log("The Store Server Has Started!");
});
